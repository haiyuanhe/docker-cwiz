# Each type can only have 1 aggregator at this time.
Aggregator.1.1.nginx.minCount = 30
Aggregator.1.1.nginx.expireMinutes = 5
Aggregator.1.1.nginx.metric = nginx.access
# Whatever this pattern parses out will all be added as tags
Aggregator.1.1.nginx.pattern = ^%{IP:ip} ([^\"]+)\"%{WORD} (?<uri>[^? \"]+)

# SearchGuard SSL
Elasticsearch.ssl.enabled = <:ssl_enable:>
Elasticsearch.ssl.plugin.path.home = .
Elasticsearch.ssl.plugin.searchguard.ssl.transport.enabled = true
Elasticsearch.ssl.plugin.searchguard.ssl.transport.keystore_filepath = <:install_root:>/certs/elasticsearch/sgadmin.jks
Elasticsearch.ssl.plugin.searchguard.ssl.transport.truststore_filepath = <:install_root:>/certs/elasticsearch/truststore.jks
Elasticsearch.ssl.plugin.searchguard.ssl.transport.keystore_password = <:ssl_password:>
Elasticsearch.ssl.plugin.searchguard.ssl.transport.truststore_password = <:ssl_password:>
Elasticsearch.ssl.plugin.searchguard.ssl.http.keystore_password = <:ssl_password:>
Elasticsearch.ssl.plugin.searchguard.ssl.http.truststore_password = <:ssl_password:>
Elasticsearch.ssl.plugin.searchguard.ssl.transport.enforce_hostname_verification = false

Elasticsearch.connect.cluster.name = cloudwiz
Elasticsearch.connect.client.transport.ignore_cluster_name = true
Elasticsearch.connect.client.transport.nodes_sampler_interval = 30s
Elasticsearch.connect.client.transport.ping_timeout = 30s
Elasticsearch.connect.client.transport.sniff = false
Elasticsearch.transport.addresses = <:elasticsearch_hosts_unquoted:>
Elasticsearch.transport.port = 9300

Elasticsearch.failure.retries = 7
Elasticsearch.timeout.seconds = 30
Elasticsearch.geoMapping.enabled = true
Elasticsearch.geoDataFile = <:install_root:>/log-processor/config/GeoLite2-City.mmdb
Elasticsearch.geoTypes = apache f5 nginx
Elasticsearch.processor.enabled = true
Elasticsearch.reconnect.pauseSeconds = 45

# To skip the next N errors, add N to the forgiveness.
Elasticsearch.failure.forgiveness = 0

Elasticsearch.transport.address0 = <:nginx_ip:>
# Elasticsearch.transport.port = 9302


File.processor.filenamePrefix = /tmp/log-processor.

# NOTE: order matters here
Grok.pattern.timestamp.00 = %{TIMESTAMP_ISO8601:timestamp}
Grok.pattern.timestamp.01 = %{SYSLOGTIMESTAMP:timestamp}
Grok.pattern.timestamp.02 = %{HTTPDATE:timestamp}
Grok.pattern.timestamp.03 = %{DATESTAMP_RFC822:timestamp}
Grok.pattern.timestamp.04 = %{DATESTAMP_RFC2822:timestamp}
Grok.pattern.timestamp.05 = %{DATESTAMP_OTHER:timestamp}
Grok.pattern.timestamp.06 = %{DATESTAMP_EVENTLOG:timestamp}
Grok.pattern.timestamp.07 = (?<timestamp>%{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME}?%{ISO8601_TIMEZONE}?)
Grok.pattern.timestamp.08 = (?<timestamp>%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME})?%{ISO8601_TIMEZONE}?
Grok.pattern.timestamp.09 = (?<timestamp>%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR}?%{ISO8601_TIMEZONE}?)
Grok.pattern.timestamp.10 = (?<timestamp>%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR} %{TZ}?)
Grok.pattern.timestamp.11 = (?<timestamp>%{DAY} %{MONTH}%{SPACE}+%{MONTHDAY} %{TIME})


Hadoop.connect.dfs.client.block.write.replace-datanode-on-failure.policy = NEVER

Hadoop.system.hadoop.home.dir = <:install_root:>/hadoop
Hadoop.system.HADOOP_USER_NAME = hdfs

Hadoop.native.lib.dir = <:install_root:>/hadoop/lib/native
Hadoop.hdfs.uri = hdfs://<:namenode_ip:>:<:hadoop_namenode_port:>
Hadoop.hdfs.root = /logs

Hadoop.processor.enabled = false

Kafka.connect.auto.offset.reset = earliest
Kafka.connect.enable.auto.commit = false
Kafka.connect.bootstrap.servers = <:nginx_ip:>:9094
Kafka.connect.group.id = log-processor
Kafka.connect.key.deserializer = org.apache.kafka.common.serialization.StringDeserializer
Kafka.connect.value.deserializer = org.apache.kafka.common.serialization.StringDeserializer
Kafka.connect.session.timeout.ms = 120000
Kafka.connect.heartbeat.interval.ms = 4000
Kafka.connect.max.poll.records = 200

Kafka.poll.delaySeconds = 5
Kafka.poll.timeoutMillis = 1000

Kafka.topic.prefix = filebeat.
Kafka.topic.refreshSeconds = 60

Kafka.ssl.connection.enabled = <:ssl_enable:>
Kafka.ssl.client.keystore = <:install_root:>/certs/kafka/client.jks
Kafka.ssl.client.key.password = <:ssl_password:>
Kafka.ssl.client.keystore.password = <:ssl_password:>
Kafka.ssl.client.trust.keystore = <:install_root:>/certs/kafka/truststore.jks
Kafka.ssl.client.trust.keystore.password = <:ssl_password:>

LogProcessor.numIterationsBetweenBreak = 2048

Opentsdb.max_no_tags = 8
Opentsdb.proxy.metrics_server_url = <:nginx_protocol:>://<:nginx_ip:>:<:nginx_port:>/_tsdb

Opentsdb.proxy.tsdb.ssl.connection.enabled = <:ssl_enable:>
Opentsdb.proxy.tsdb.ssl.client.keystore = <:install_root:>/certs/nginx/client.jks
Opentsdb.proxy.tsdb.ssl.client.key.password = <:ssl_password:>
Opentsdb.proxy.tsdb.ssl.client.keystore.password = <:ssl_password:>
Opentsdb.proxy.tsdb.ssl.client.trust.keystore = <:install_root:>/certs/nginx/clientTrust.jks
Opentsdb.proxy.tsdb.ssl.client.trust.keystore.password = <:ssl_password:>

Opentsdb.proxy.mysql_url = jdbc:mysql://<:nginx_ip:>:3308/<:grafana_database:>?useUnicode=true&characterEncoding=utf8&useSSL=<:ssl_enable:>
Opentsdb.proxy.mysql_username = <:mysql_username:>
Opentsdb.proxy.mysql_password = <:mysql_password:>

Opentsdb.proxy.mysql.ssl.enabled = <:ssl_enable:>
Opentsdb.proxy.mysql.ssl.keyStore = <:install_root:>/certs/mysql/client.jks
Opentsdb.proxy.mysql.ssl.keyStorePassword = <:ssl_password:>
Opentsdb.proxy.mysql.ssl.trustStore = <:install_root:>/certs/mysql/truststore.jks
Opentsdb.proxy.mysql.ssl.trustStorePassword = <:ssl_password:>

Opentsdb.processor.enabled = true

# Disable a particular topic
#Opentsdb.processor.7.6.enabled = false
Opentsdb.proxy.tsdb.ssl.connection.enabled = <:ssl_enable:>
Opentsdb.proxy.tsdb.ssl.client.keystore = <:install_root:>/certs/nginx/client.jks
Opentsdb.proxy.tsdb.ssl.client.key.password = <:ssl_password:>
Opentsdb.proxy.tsdb.ssl.client.keystore.password = <:ssl_password:>
Opentsdb.proxy.tsdb.ssl.client.trust.keystore = <:install_root:>/certs/nginx/clientTrust.jks
Opentsdb.proxy.tsdb.ssl.client.trust.keystore.password = <:ssl_password:>

Server.host = log_processor
#Server.port = 9500
Server.port = 443
Server.enabled = true
Server.stats.port = 9918

CMDB.cmdb_service = <:nginx_protocol:>://<:nginx_ip:>:<:nginx_port:>/_cmdb
CMDB.ssl.connection.enabled = <:ssl_enable:>
CMDB.ssl.client.keystore = <:install_root:>/certs/nginx/client.jks
CMDB.ssl.client.key.password = <:ssl_password:>
CMDB.ssl.client.keystore.password = <:ssl_password:>
CMDB.ssl.client.trust.keystore = <:install_root:>/certs/nginx/clientTrust.jks
CMDB.ssl.client.trust.keystore.password = <:ssl_password:>

Config.refreshSeconds = 60
Scheduler.refreshSeconds = 60

Processor.ssl.enabled = <:ssl_enable:>
#1：单向认证，2：双向认证
Processor.ssl.authority = 2
Processor.ssl.certificate = <:install_root:>/certs/log-processor/server.crt
Processor.ssl.keystore = <:install_root:>/certs/log-processor/server.jks
Processor.ssl.key.password = <:ssl_password:>
Processor.ssl.keystore.password = <:ssl_password:>
Processor.ssl.trust.keystore = <:install_root:>/certs/log-processor/serverTrust.jks
Processor.ssl.trust.keystore.password = <:ssl_password:>

Processor.secret.key = <:secret_key:>



# This is the catch all pattern in case nothing is configured.
Processor.pattern.default.default._es0 = %{TIMESTAMP_ISO8601:timestamp}
Processor.pattern.default.collector._es0 = %{TIMESTAMP_ISO8601:timestamp} %{WORD:module}\\[%{POSINT:process}:%{POSINT:thread}\\]:%{INT:line} %{LOGLEVEL:level}
Processor.pattern.default.system._es0 = %{SYSLOGTIMESTAMP:timestamp}
Processor.pattern.default.system.ssh_failed = Failed password for %{NOTSPACE:usr} from %{IP:ip}

Processor.pattern.1.1.alertd.exception = (?<exception>[A-Za-z]+[Ee]xception[A-Za-z]*)

Processor.pattern.1.1.alertd._es0 = ^[ ]*%{LOGLEVEL:level} \\[%{NOTSPACE:thread}\\] %{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:file} \\(line %{INT:line}\\)
Processor.pattern.1.1.hadoop._es0 = %{TIMESTAMP_ISO8601:timestamp}[ ]+%{LOGLEVEL:level}[ ]+(?<class>[^:]+):[ ]+(?:src:[ ]+/%{IP:srcip}:%{POSINT:srcport},[ ]+dest:[ ]+/%{IP:dstip}:%{POSINT:dstport},[ ]+bytes:[ ]+%{INT:bytes},[ ]+op:[ ]+%{WORD:op}.* offset:[ ]+%{INT:hoffset},[ ]+srvID:[ ]+%{UUID:srvid}.* duration:[ ]+%{INT:duration})?
Processor.pattern.1.1.hbase._es0 = %{TIMESTAMP_ISO8601:timestamp}[ ]+%{LOGLEVEL:level}[ ]+
Processor.pattern.1.1.logclustering._es0 = %{TIMESTAMP_ISO8601:timestamp} \\[%{LOGLEVEL:level}\\] \\[%{NOTSPACE:thread}\\] \\[%{NOTSPACE:class}\\]\
Processor.pattern.1.1.nginx._es0 = ^%{IPORHOST:remote_ip} - - \\[%{HTTPDATE:timestamp}\\]
Processor.pattern.1.1.system._es0 = %{TIMESTAMP_ISO8601:timestamp}
Processor.pattern.1.1.tsd._es0 = %{TIME:timestamp}[ ]+%{LOGLEVEL:level}[ ]+\\[%{WORD:class}.%{WORD:method}\\]
Processor.pattern.1.1.zookeeper._es0 = %{TIMESTAMP_ISO8601:timestamp}[ ]+\\[myid:%{INT:myid}\\][ ]+-[ ]+%{LOGLEVEL:level}[ ]+\\[%{GREEDYDATA:thread}:%{WORD:class}@%{POSINT:line}\\]


# For testing only
Processor.pattern.1.1.nginx._es0 = ^%{IPORHOST:ip}
Processor.pattern.1.1.default.cwiz = ^(?<cwiz>@#CWIZ#@) %{WORD:requestId} %{WORD:metric_type} %{INT:timestamp} %{WORD:metric_name} %{NUMBER:metric_value}(?:%{GREEDYDATA:metric_tags})
